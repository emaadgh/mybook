<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyBook.API</name>
    </assembly>
    <members>
        <member name="T:MyBook.API.Controllers.AuthorsController">
            <summary>
            Controller responsible for handling operations related to authors.
            </summary>
        </member>
        <member name="M:MyBook.API.Controllers.AuthorsController.#ctor(MyBook.Services.IMyBookRepository,AutoMapper.IMapper,MyBook.API.Services.IPropertyMappingService,MyBook.API.Services.IPropertyCheckerService,Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory)">
            <summary>
            Constructor for AuthorsController.
            </summary>
        </member>
        <member name="M:MyBook.API.Controllers.AuthorsController.GetAuthor(System.Guid,System.String)">
            <summary>
            Get an author by id
            </summary>
            <param name="id"> The id of the author to get</param>
            <param name="fields"> The fields that are needed</param>
            <returns>An ActionResult containing the requested author.</returns>
        </member>
        <member name="M:MyBook.API.Controllers.AuthorsController.GetAuthors(MyBook.API.ResourceParameters.AuthorsResourceParameters)">
            <summary>
            Get all authors.
            </summary>
            <param name="authorsResourceParameters">Parameters for filtering, searching, and pagination.</param>
            <returns>An ActionResult containing a list of authors.</returns>
        </member>
        <member name="M:MyBook.API.Controllers.AuthorsController.CreateAuthor(MyBook.API.Models.AuthorForCreationDto)">
            <summary>
            Create a new author.
            </summary>
            <param name="authorForCreationDto">The data for creating a new author.</param>
            <returns>An ActionResult containing the created author.</returns>
        </member>
        <member name="M:MyBook.API.Controllers.AuthorsController.UpdateAuthor(System.Guid,MyBook.API.Models.AuthorForUpdateDto)">
            <summary>
            Update an existing author.
            </summary>
            <param name="id">The id of the author to update.</param>
            <param name="authorForUpdateDto">The data for updating the author.</param>
            <returns>An ActionResult indicating success or failure of the operation.</returns>
        </member>
        <member name="M:MyBook.API.Controllers.AuthorsController.PartiallyUpdateAuthor(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{MyBook.API.Models.AuthorForUpdateDto})">
            <summary>
            Partially update an existing author.
            </summary>
            <param name="id">The id of the author to update.</param>
            <param name="patchDocument">The patch document containing updates.</param>
            <returns>An ActionResult indicating success or failure of the operation.</returns>
        </member>
        <member name="M:MyBook.API.Controllers.AuthorsController.DeleteAuthor(System.Guid)">
            <summary>
            Delete an author.
            </summary>
            <param name="id">The id of the author to delete.</param>
            <returns>An ActionResult indicating success or failure of the operation.</returns>
        </member>
        <member name="T:MyBook.API.Controllers.RootController">
            <summary>
            Controller for accessing root API endpoints.
            </summary>
        </member>
        <member name="M:MyBook.API.Controllers.RootController.GetRoot">
            <summary>
            Get the root of the API.
            </summary>
            <returns>An IActionResult containing links to different API endpoints.</returns> 
        </member>
        <member name="T:MyBook.API.Migrations.init">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.init.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.init.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.init.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:MyBook.API.Migrations.updateseeddata">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.updateseeddata.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.updateseeddata.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.updateseeddata.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:MyBook.API.Migrations.FixesISBNnumbersinseeddata">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.FixesISBNnumbersinseeddata.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.FixesISBNnumbersinseeddata.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MyBook.API.Migrations.FixesISBNnumbersinseeddata.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:MyBook.API.Models.AuthorForCreationDto">
            <summary>
            Data transfer object (DTO) for creating a new author entity.
            </summary>
        </member>
        <member name="T:MyBook.API.Models.AuthorForManipulationDto">
            <summary>
            Data transfer object (DTO) for manipulating author entities.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.AuthorForManipulationDto.Name">
            <summary>
            Gets or sets the name of the author.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.AuthorForManipulationDto.Description">
            <summary>
            Gets or sets the description of the author.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.AuthorForManipulationDto.DateOfBirth">
            <summary>
            Gets or sets the date of birth of the author.
            </summary>
        </member>
        <member name="T:MyBook.API.Models.AuthorForUpdateDto">
            <summary>
            Data transfer object (DTO) for updating an existing author entity.
            </summary>
        </member>
        <member name="T:MyBook.API.Models.BookForCreationDto">
            <summary>
            Data transfer object (DTO) for creating book entities.
            </summary>
        </member>
        <member name="T:MyBook.API.Models.BookForManipulationDto">
            <summary>
            Data transfer object (DTO) for manipulating book entities.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.BookForManipulationDto.Title">
            <summary>
            Gets or sets the title of the book.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.BookForManipulationDto.ISBN">
            <summary>
            Gets or sets the ISBN (International Standard Book Number) of the book.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.BookForManipulationDto.Description">
            <summary>
            Gets or sets the description of the book.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.BookForManipulationDto.Category">
            <summary>
            Gets or sets the category of the book.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.BookForManipulationDto.PublicationDate">
            <summary>
            Gets or sets the publication date of the book.
            </summary>
        </member>
        <member name="P:MyBook.API.Models.BookForManipulationDto.Publisher">
            <summary>
            Gets or sets the publisher of the book.
            </summary>
        </member>
        <member name="T:MyBook.API.Models.BookForUpdateDto">
            <summary>
            Data transfer object (DTO) for updating book entities.
            </summary>
        </member>
        <member name="T:MyBook.API.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MyBook.API.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MyBook.API.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:MyBook.Controllers.BooksController.#ctor(MyBook.Services.IMyBookRepository,AutoMapper.IMapper,MyBook.API.Services.IPropertyMappingService,MyBook.API.Services.IPropertyCheckerService,Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory)">
            <summary>
            Constructor for BooksController.
            </summary>
        </member>
        <member name="M:MyBook.Controllers.BooksController.GetBook(System.Guid,System.String)">
            <summary>
            Get a book by id.
            </summary>
            <param name="id">The id of the book to get.</param>
            <param name="fields">The fields that are needed.</param>
            <returns>An ActionResult containing the requested book.</returns>
        </member>
        <member name="M:MyBook.Controllers.BooksController.GetBooks(MyBook.API.ResourceParameters.BooksResourceParameters)">
            <summary>
            Get all books.
            </summary>
            <param name="booksResourceParameters">Parameters for filtering, searching, and pagination.</param>
            <returns>An ActionResult containing a list of books.</returns>
        </member>
        <member name="M:MyBook.Controllers.BooksController.CreateBookForAuthor(System.Guid,MyBook.API.Models.BookForCreationDto)">
            <summary>
            Create a new book for an author.
            </summary>
            <param name="authorId">The id of the author for whom the book is created.</param>
            <param name="book">The data for creating a new book.</param>
            <returns>An ActionResult containing the created book.</returns>
        </member>
        <member name="M:MyBook.Controllers.BooksController.UpdateBook(System.Guid,System.Guid,MyBook.API.Models.BookForUpdateDto)">
            <summary>
            Update an existing book.
            </summary>
            <param name="bookId">The id of the book to update.</param>
            <param name="authorId">The id of the author of the book.</param>
            <param name="book">The data for updating the book.</param>
            <returns>An ActionResult indicating success or failure of the operation.</returns>
        </member>
        <member name="M:MyBook.Controllers.BooksController.PartiallyUpdateBook(System.Guid,System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{MyBook.API.Models.BookForUpdateDto})">
            <summary>
            Partially update an existing book.
            </summary>
            <param name="bookId">The id of the book to update.</param>
            <param name="authorId">The id of the author of the book.</param>
            <param name="patchDocument">The patch document containing updates.</param>
            <returns>An ActionResult indicating success or failure of the operation.</returns>
        </member>
        <member name="M:MyBook.Controllers.BooksController.DeleteBook(System.Guid)">
            <summary>
            Delete a book.
            </summary>
            <param name="bookId">The id of the book to delete.</param>
            <returns>An ActionResult indicating success or failure of the operation.</returns>
        </member>
    </members>
</doc>
